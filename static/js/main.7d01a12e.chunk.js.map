{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","console","log","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","htmlFor","id","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","class","delete","finish","toLocaleDateString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","Fragment","App","counter","deletedTask","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d01a12e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './AddTask.css'\r\n\r\n\r\nclass AddTask extends Component {\r\n\r\n    minDate = new Date().toISOString().slice(0,10);\r\n    state = {  \r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n    }\r\n\r\n    handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleCheckbox= (e) => {\r\n        this.setState({ \r\n            checked: e.target.checked\r\n        })\r\n    }\r\n\r\n\r\n    handleDate = (e) => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        console.log(\"dodaj\");\r\n        const {text, checked, date} = this.state;\r\n        if(text.length>2) {\r\n       const add = this.props.add(text, date, checked);\r\n       if(add) {\r\n           this.setState({\r\n               text: '',\r\n               checked: false,\r\n               date: this.minDate\r\n           })\r\n       }\r\n    } else {\r\n        alert(\"za krótka nazwa\")\r\n    }\r\n    }\r\n\r\n    render() { \r\n        let maxDate = this.minDate.slice(0,4) * 1 + 1;\r\n        maxDate = maxDate+\"-12-31\"\r\n        return (  \r\n            <div className=\"form\">\r\n               <input type=\"text\" placeholder=\"Dodaj zadanie\" value={this.state.text} onChange={this.handleText}/>\r\n               <label htmlFor=\"important\"> <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckbox}/>Pilne</label>\r\n               <label htmlFor=\"date\">Do kiedy zrobić:</label>\r\n               <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate}/>\r\n               <button onClick={this.handleClick}>Dodaj</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AddTask;","import React from 'react'\r\n\r\nconst Task = (props) => {\r\n\r\n    const style = {\r\n       color:'red',\r\n    }\r\n\r\n    const {text, date, id, active, important, finishDate} = props.task;\r\n    if(active) {\r\n    return ( \r\n        <div className=\"done-task\">\r\n            <p>\r\n               <strong style={important ? style : null }>{text}</strong><span> - do {date}</span>\r\n            </p>\r\n            <div>\r\n                <button onClick={() => props.change(id)} className=\"done-btn\" ><i class=\"far fa-check-circle fa-3x\"></i></button>\r\n                <button  onClick={() => props.delete(id)} className=\"exit\" ><i class=\"far fa-times-circle fa-3x\"></i></button >\r\n            </div>               \r\n        </div>\r\n     );\r\n    } else {\r\n        const finish = new Date(finishDate).toLocaleDateString()\r\n        return (\r\n           <div className=\"done_tasks\" >\r\n               <p><strong>{text}</strong>(zrobić do {date}) - potwierdzenie wykonania <span>{finish}</span></p>\r\n                <button  onClick={() => props.delete(id)} className=\"end\">Usuń</button>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Task;","import React from 'react'\r\nimport Task from './Task'\r\n\r\nconst TaskList = (props) => {\r\n    const active = props.tasks.filter(task => task.active)\r\n    const done= props.tasks.filter(task => !task.active)\r\n\r\n    done.sort((a,b) => b.finishDate - a.finishDate )\r\n\r\n    if (active.length >= 2) {\r\n        active.sort((a, b) => {\r\n            a = a.text.toLowerCase();\r\n            b = b.text.toLowerCase();\r\n\r\n            if (a <b) return -1;\r\n            if (a > b) return 1;\r\n            return 0\r\n        })\r\n    }\r\n  \r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n    return ( \r\n        <>\r\n        <div className=\"active\">\r\n        <h1>Zadania do zrobienia</h1>\r\n            {activeTasks.length > 0 ? activeTasks : <p>Brak dodanych zadań</p> } \r\n        </div>\r\n        <div className=\"done\">\r\n        <h1>Zadania zrobione {done.length > 0 ? done.length : null}</h1>\r\n        {done.length>20 && <span>Wyświetlonych jest jedynie 20 ostatni elementów</span>}\r\n        {doneTasks.slice(0,8)} \r\n        </div>\r\n\r\n        </>\r\n     );\r\n}\r\n \r\nexport default TaskList;","import React, { Component } from 'react';\nimport AddTask from './AddTask'\nimport TaskList from './TaskList'\nimport './App.css';\n\nclass App extends Component {\n  counter = 0;\n  state = {\n    tasks: [\n     \n    ]\n  }\n\n  deletedTask = (id) => {\n    let tasks = [...this.state.tasks]\n    tasks = tasks.filter(task => task.id !== id)\n    this.setState({\n      tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n    let tasks = Array.from(this.state.tasks)\n    tasks.forEach(task => {\n      if(task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    })\n    this.setState({\n      tasks\n    })\n}\n\naddTask = (text, date, important) => {\n  console.log(\"dodany obiekt\");\n  const task = {\n    id: this.counter,\n    text,\n    date,\n    important,\n    active: true,\n    finishDate: null\n  }\n  this.counter++\n  console.log(task, this.counter);\n\n  this.setState(prevState => ({\n    tasks: [...prevState.tasks, task]\n  }))\n  \n  return true\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"box\">\n        <h1>TO DO LIST</h1>\n        <AddTask add={this.addTask}/>\n        <TaskList tasks={this.state.tasks} delete= {this.deletedTask} change={this.changeTaskStatus}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}